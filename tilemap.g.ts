// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [], -Infinity);
            case "level3":
            case "level3":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.castle.tileGrass2], TileScale.Sixteen);
            case "Level1":
            case "level2":return tiles.createTilemap(hex`10001000010101010101010101010101010101010101010102010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010103050305060602060102010101010101040404040604010101010101010201010605030505050b040a0a0a080101010104050505040407050a0a0a08010101010606040404050b050a0a090801010106060605050305010101010101010101010605030506060503010101010201010101010101060601010101010101010101010101010101010101020101010101010101010101010201010101010101010101020101010101010101010101010101010101010101010101010101`, img`
. . . . . . . . . . . . . . . . 
. . . . 2 . . . . 2 . . . . . . 
. . . . . . . . . . . . . . . . 
. . . 2 2 2 2 2 2 . . . . . . . 
. . . 2 . . . . 2 2 2 2 2 2 . . 
. . . 2 . . . . 2 . 2 2 2 2 2 2 
. 2 2 2 2 . . . . . . . . . . . 
. . 2 2 . . . . . . . . . . . . 
. . 2 2 2 2 . . . . . . . . . . 
. . . . 2 2 . . . . 2 2 2 2 2 2 
. . . . 2 . . . 2 2 . . 2 . . . 
2 . . . 2 2 2 2 2 2 2 2 2 . . . 
. . . . . . . . . . . . . 2 . . 
. . . . . . . . . . 2 . . . . . 
. . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.dungeon.hazardLava0,sprites.castle.rock0,sprites.dungeon.floorLight3,sprites.dungeon.floorLightMoss,sprites.dungeon.floorLight0,sprites.dungeon.hazardLava1,sprites.dungeon.floorLight5,sprites.dungeon.stairWest,sprites.dungeon.floorDark3,sprites.dungeon.floorDark0,sprites.dungeon.floorLight2], TileScale.Sixteen);
            case "level5":
            case "level5":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "Level2":
            case "level4":return tiles.createTilemap(hex``, img`
. 2 . . . . . . . . . . . . . . 
. 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
. 2 . . . . . . . . . . . . 2 . 
. 2 . . 2 . . . . . . 2 . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
. . . . . . . . . 2 2 2 . . 2 . 
. . . . . . . . . . . 2 . . 2 . 
. . . . . . . . . . . 2 . . 2 . 
. . . . . . . . . 2 2 2 . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
. 2 . . 2 . . . . . . 2 . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
. 2 . . . 2 2 2 2 2 2 . . . 2 . 
`, [myTiles.transparency16,sprites.dungeon.stairWest,sprites.dungeon.darkGroundCenter,sprites.dungeon.doorLockedSouth,sprites.dungeon.floorLightMoss,sprites.dungeon.hazardLava0,sprites.builtin.forestTiles10,sprites.dungeon.collectibleInsignia,myTiles.tile1], TileScale.Sixteen);
            case "level6":
            case "level6":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level0":
            case "level7":return tiles.createTilemap(hex``, img`
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 . . . . . . . . . 2 . 2 
2 2 2 . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 2 . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 2 . . . . . . 2 . . . . . 2 2 
2 2 . . . . . . 2 . . . . . 2 2 
2 2 . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 . . . . . . . . . . . . . . 2 
2 2 . . . . . . . . . . . . . 2 
2 2 . . . . . . . . . . . . 2 2 
2 . 2 . . . . . . . . . . . 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.castle.tileGrass1,sprites.castle.tilePath5,sprites.castle.tileDarkGrass2,sprites.castle.tileDarkGrass3,sprites.builtin.forestTiles0,sprites.builtin.forestTiles2,sprites.builtin.forestTiles3,sprites.builtin.forestTiles1,sprites.castle.tileDarkGrass1], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
            case "tile2":return tile2;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
